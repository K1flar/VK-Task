// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	domains "film_library/internal/domains"
	pagination "film_library/pkg/pagination"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(user domains.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), user)
}

// Login mocks base method.
func (m *MockUserService) Login(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), login, password)
}

// MockFilmService is a mock of FilmService interface.
type MockFilmService struct {
	ctrl     *gomock.Controller
	recorder *MockFilmServiceMockRecorder
}

// MockFilmServiceMockRecorder is the mock recorder for MockFilmService.
type MockFilmServiceMockRecorder struct {
	mock *MockFilmService
}

// NewMockFilmService creates a new mock instance.
func NewMockFilmService(ctrl *gomock.Controller) *MockFilmService {
	mock := &MockFilmService{ctrl: ctrl}
	mock.recorder = &MockFilmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmService) EXPECT() *MockFilmServiceMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockFilmService) CreateFilm(film domains.Film, actors []uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", film, actors)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmServiceMockRecorder) CreateFilm(film, actors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilmService)(nil).CreateFilm), film, actors)
}

// DeleteFilm mocks base method.
func (m *MockFilmService) DeleteFilm(id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmServiceMockRecorder) DeleteFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmService)(nil).DeleteFilm), id)
}

// GetFilms mocks base method.
func (m *MockFilmService) GetFilms(filter *pagination.FilmFilter) ([]*domains.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", filter)
	ret0, _ := ret[0].([]*domains.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockFilmServiceMockRecorder) GetFilms(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockFilmService)(nil).GetFilms), filter)
}

// UpdateFilm mocks base method.
func (m *MockFilmService) UpdateFilm(id uint32, film domains.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", id, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmServiceMockRecorder) UpdateFilm(id, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilmService)(nil).UpdateFilm), id, film)
}

// UpdateFilmDescription mocks base method.
func (m *MockFilmService) UpdateFilmDescription(id uint32, descrtion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmDescription", id, descrtion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmDescription indicates an expected call of UpdateFilmDescription.
func (mr *MockFilmServiceMockRecorder) UpdateFilmDescription(id, descrtion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmDescription", reflect.TypeOf((*MockFilmService)(nil).UpdateFilmDescription), id, descrtion)
}

// UpdateFilmName mocks base method.
func (m *MockFilmService) UpdateFilmName(id uint32, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmName", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmName indicates an expected call of UpdateFilmName.
func (mr *MockFilmServiceMockRecorder) UpdateFilmName(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmName", reflect.TypeOf((*MockFilmService)(nil).UpdateFilmName), id, name)
}

// UpdateFilmRating mocks base method.
func (m *MockFilmService) UpdateFilmRating(id uint32, rating int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmRating", id, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmRating indicates an expected call of UpdateFilmRating.
func (mr *MockFilmServiceMockRecorder) UpdateFilmRating(id, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmRating", reflect.TypeOf((*MockFilmService)(nil).UpdateFilmRating), id, rating)
}

// UpdateFilmReleaseDate mocks base method.
func (m *MockFilmService) UpdateFilmReleaseDate(id uint32, releaseDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmReleaseDate", id, releaseDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmReleaseDate indicates an expected call of UpdateFilmReleaseDate.
func (mr *MockFilmServiceMockRecorder) UpdateFilmReleaseDate(id, releaseDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmReleaseDate", reflect.TypeOf((*MockFilmService)(nil).UpdateFilmReleaseDate), id, releaseDate)
}

// MockActorService is a mock of ActorService interface.
type MockActorService struct {
	ctrl     *gomock.Controller
	recorder *MockActorServiceMockRecorder
}

// MockActorServiceMockRecorder is the mock recorder for MockActorService.
type MockActorServiceMockRecorder struct {
	mock *MockActorService
}

// NewMockActorService creates a new mock instance.
func NewMockActorService(ctrl *gomock.Controller) *MockActorService {
	mock := &MockActorService{ctrl: ctrl}
	mock.recorder = &MockActorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorService) EXPECT() *MockActorServiceMockRecorder {
	return m.recorder
}

// AddActorsToFilm mocks base method.
func (m *MockActorService) AddActorsToFilm(filmID uint32, actorsID []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActorsToFilm", filmID, actorsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActorsToFilm indicates an expected call of AddActorsToFilm.
func (mr *MockActorServiceMockRecorder) AddActorsToFilm(filmID, actorsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActorsToFilm", reflect.TypeOf((*MockActorService)(nil).AddActorsToFilm), filmID, actorsID)
}

// CreateActor mocks base method.
func (m *MockActorService) CreateActor(actor domains.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorServiceMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorService)(nil).CreateActor), actor)
}

// DeleteActor mocks base method.
func (m *MockActorService) DeleteActor(id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorServiceMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorService)(nil).DeleteActor), id)
}

// DeleteActorFromFilm mocks base method.
func (m *MockActorService) DeleteActorFromFilm(actorID, filmID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorFromFilm", actorID, filmID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorFromFilm indicates an expected call of DeleteActorFromFilm.
func (mr *MockActorServiceMockRecorder) DeleteActorFromFilm(actorID, filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorFromFilm", reflect.TypeOf((*MockActorService)(nil).DeleteActorFromFilm), actorID, filmID)
}

// GetActorsWithFilms mocks base method.
func (m *MockActorService) GetActorsWithFilms(filter *pagination.ActorsFilter) ([]*domains.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsWithFilms", filter)
	ret0, _ := ret[0].([]*domains.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsWithFilms indicates an expected call of GetActorsWithFilms.
func (mr *MockActorServiceMockRecorder) GetActorsWithFilms(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsWithFilms", reflect.TypeOf((*MockActorService)(nil).GetActorsWithFilms), filter)
}

// UpdateActor mocks base method.
func (m *MockActorService) UpdateActor(id uint32, actor domains.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", id, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorServiceMockRecorder) UpdateActor(id, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorService)(nil).UpdateActor), id, actor)
}

// UpdateActorBirthday mocks base method.
func (m *MockActorService) UpdateActorBirthday(id uint32, birthday time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorBirthday", id, birthday)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorBirthday indicates an expected call of UpdateActorBirthday.
func (mr *MockActorServiceMockRecorder) UpdateActorBirthday(id, birthday interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorBirthday", reflect.TypeOf((*MockActorService)(nil).UpdateActorBirthday), id, birthday)
}

// UpdateActorFullName mocks base method.
func (m *MockActorService) UpdateActorFullName(id uint32, fullName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorFullName", id, fullName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorFullName indicates an expected call of UpdateActorFullName.
func (mr *MockActorServiceMockRecorder) UpdateActorFullName(id, fullName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorFullName", reflect.TypeOf((*MockActorService)(nil).UpdateActorFullName), id, fullName)
}

// UpdateActorGender mocks base method.
func (m *MockActorService) UpdateActorGender(id uint32, gender domains.Gender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorGender", id, gender)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorGender indicates an expected call of UpdateActorGender.
func (mr *MockActorServiceMockRecorder) UpdateActorGender(id, gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorGender", reflect.TypeOf((*MockActorService)(nil).UpdateActorGender), id, gender)
}

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AddActorsToFilm mocks base method.
func (m *MockIService) AddActorsToFilm(filmID uint32, actorsID []uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActorsToFilm", filmID, actorsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActorsToFilm indicates an expected call of AddActorsToFilm.
func (mr *MockIServiceMockRecorder) AddActorsToFilm(filmID, actorsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActorsToFilm", reflect.TypeOf((*MockIService)(nil).AddActorsToFilm), filmID, actorsID)
}

// CreateActor mocks base method.
func (m *MockIService) CreateActor(actor domains.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockIServiceMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockIService)(nil).CreateActor), actor)
}

// CreateFilm mocks base method.
func (m *MockIService) CreateFilm(film domains.Film, actors []uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", film, actors)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockIServiceMockRecorder) CreateFilm(film, actors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockIService)(nil).CreateFilm), film, actors)
}

// CreateUser mocks base method.
func (m *MockIService) CreateUser(user domains.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIService)(nil).CreateUser), user)
}

// DeleteActor mocks base method.
func (m *MockIService) DeleteActor(id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockIServiceMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockIService)(nil).DeleteActor), id)
}

// DeleteActorFromFilm mocks base method.
func (m *MockIService) DeleteActorFromFilm(actorID, filmID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorFromFilm", actorID, filmID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorFromFilm indicates an expected call of DeleteActorFromFilm.
func (mr *MockIServiceMockRecorder) DeleteActorFromFilm(actorID, filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorFromFilm", reflect.TypeOf((*MockIService)(nil).DeleteActorFromFilm), actorID, filmID)
}

// DeleteFilm mocks base method.
func (m *MockIService) DeleteFilm(id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockIServiceMockRecorder) DeleteFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockIService)(nil).DeleteFilm), id)
}

// GetActorsWithFilms mocks base method.
func (m *MockIService) GetActorsWithFilms(filter *pagination.ActorsFilter) ([]*domains.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsWithFilms", filter)
	ret0, _ := ret[0].([]*domains.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsWithFilms indicates an expected call of GetActorsWithFilms.
func (mr *MockIServiceMockRecorder) GetActorsWithFilms(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsWithFilms", reflect.TypeOf((*MockIService)(nil).GetActorsWithFilms), filter)
}

// GetFilms mocks base method.
func (m *MockIService) GetFilms(filter *pagination.FilmFilter) ([]*domains.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", filter)
	ret0, _ := ret[0].([]*domains.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockIServiceMockRecorder) GetFilms(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockIService)(nil).GetFilms), filter)
}

// Login mocks base method.
func (m *MockIService) Login(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIServiceMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIService)(nil).Login), login, password)
}

// UpdateActor mocks base method.
func (m *MockIService) UpdateActor(id uint32, actor domains.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", id, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockIServiceMockRecorder) UpdateActor(id, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockIService)(nil).UpdateActor), id, actor)
}

// UpdateActorBirthday mocks base method.
func (m *MockIService) UpdateActorBirthday(id uint32, birthday time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorBirthday", id, birthday)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorBirthday indicates an expected call of UpdateActorBirthday.
func (mr *MockIServiceMockRecorder) UpdateActorBirthday(id, birthday interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorBirthday", reflect.TypeOf((*MockIService)(nil).UpdateActorBirthday), id, birthday)
}

// UpdateActorFullName mocks base method.
func (m *MockIService) UpdateActorFullName(id uint32, fullName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorFullName", id, fullName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorFullName indicates an expected call of UpdateActorFullName.
func (mr *MockIServiceMockRecorder) UpdateActorFullName(id, fullName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorFullName", reflect.TypeOf((*MockIService)(nil).UpdateActorFullName), id, fullName)
}

// UpdateActorGender mocks base method.
func (m *MockIService) UpdateActorGender(id uint32, gender domains.Gender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActorGender", id, gender)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActorGender indicates an expected call of UpdateActorGender.
func (mr *MockIServiceMockRecorder) UpdateActorGender(id, gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActorGender", reflect.TypeOf((*MockIService)(nil).UpdateActorGender), id, gender)
}

// UpdateFilm mocks base method.
func (m *MockIService) UpdateFilm(id uint32, film domains.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", id, film)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockIServiceMockRecorder) UpdateFilm(id, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockIService)(nil).UpdateFilm), id, film)
}

// UpdateFilmDescription mocks base method.
func (m *MockIService) UpdateFilmDescription(id uint32, descrtion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmDescription", id, descrtion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmDescription indicates an expected call of UpdateFilmDescription.
func (mr *MockIServiceMockRecorder) UpdateFilmDescription(id, descrtion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmDescription", reflect.TypeOf((*MockIService)(nil).UpdateFilmDescription), id, descrtion)
}

// UpdateFilmName mocks base method.
func (m *MockIService) UpdateFilmName(id uint32, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmName", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmName indicates an expected call of UpdateFilmName.
func (mr *MockIServiceMockRecorder) UpdateFilmName(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmName", reflect.TypeOf((*MockIService)(nil).UpdateFilmName), id, name)
}

// UpdateFilmRating mocks base method.
func (m *MockIService) UpdateFilmRating(id uint32, rating int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmRating", id, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmRating indicates an expected call of UpdateFilmRating.
func (mr *MockIServiceMockRecorder) UpdateFilmRating(id, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmRating", reflect.TypeOf((*MockIService)(nil).UpdateFilmRating), id, rating)
}

// UpdateFilmReleaseDate mocks base method.
func (m *MockIService) UpdateFilmReleaseDate(id uint32, releaseDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmReleaseDate", id, releaseDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmReleaseDate indicates an expected call of UpdateFilmReleaseDate.
func (mr *MockIServiceMockRecorder) UpdateFilmReleaseDate(id, releaseDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmReleaseDate", reflect.TypeOf((*MockIService)(nil).UpdateFilmReleaseDate), id, releaseDate)
}
